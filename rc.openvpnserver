#!/bin/sh

openvpnserver_cert_updatecfg()
{
# Arguments file used for WEBUI configuration update
ARGUMENTS_FILE="/usr/local/emhttp/plugins/openvpnserver/openvpnserver_cert.args"
[ -f $ARGUMENTS_FILE ] && source $ARGUMENTS_FILE

KEY_COUNTRY=$KEY_COUNTRY_NEW
KEY_PROVINCE=$KEY_PROVINCE_NEW
KEY_CITY=$KEY_CITY_NEW
KEY_ORG=$KEY_ORG_NEW
KEY_EMAIL=$KEY_EMAIL_NEW
KEY_PATH=$KEY_PATH_NEW

  write_cfg_cert
  
}

#################
# W R I T E C F G
#################
write_cfg_cert()
{ 
  echo "# openvpnserver plugin configuration file for the certs" > /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

  echo "KEY_COUNTRY=\"$KEY_COUNTRY\"" >> /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg
  echo "KEY_PROVINCE=\"$KEY_PROVINCE\"" >> /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg
  echo "KEY_CITY=\"$KEY_CITY\"" >> /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg
  echo "KEY_ORG=\"$KEY_ORG\"" >> /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg
  echo "KEY_EMAIL=\"$KEY_EMAIL\"" >> /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg
  echo "KEY_PATH=\"$KEY_PATH\"" >> /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

  logger -trc.openvpnserver -plocal7.info -is "Plugin configuration for certs written"
}

openvpnserver_updatecfg()
{
# Arguments file used for WEBUI configuration update
ARGUMENTS_FILE="/usr/local/emhttp/plugins/openvpnserver/openvpnserver.args"

[ -f $ARGUMENTS_FILE ] && source $ARGUMENTS_FILE

INSTALL_ON_BOOT=$INSTALL_ON_BOOT_NEW
DISCONNECT_ON_UMOUNT=$DISCONNECT_ON_UMOUNT_NEW
SERVER_PATH=$SERVER_PATH_NEW
NETWORK=$NETWORK_NEW
NETMASK=$NETMASK_NEW
SERVER_PORT=$SERVER_PORT_NEW
CANONICAL=$CANONICAL_NEW
PROTOCOL=$PROTOCOL_NEW
CIPHER=$CIPHER_NEW
CLIENT=$CLIENT_NEW
HASH_ALGO=$HASH_ALGO_NEW
GATEWAY=$GATEWAY_NEW
SUBNET=$SUBNET_NEW
LAN_SUBNET=$LAN_SUBNET_NEW
COMP_LZO=$COMP_LZO_NEW
IPP=$IPP_NEW
DHCP_1=$DHCP_1_NEW
TELNET_CONSOLE=$TELNET_CONSOLE_NEW
VERB=$VERB_NEW

  write_cfg
}

#################
# W R I T E C F G
#################
write_cfg()
{ 
  echo "# openvpnserver plugin configuration file" > /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "INSTALL_ON_BOOT=\"$INSTALL_ON_BOOT\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "DISCONNECT_ON_UMOUNT=\"$DISCONNECT_ON_UMOUNT\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "SERVER_PATH=$SERVER_PATH" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "NETWORK=$NETWORK" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "NETMASK=$NETMASK" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "SERVER_PORT=$SERVER_PORT" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "CANONICAL=$CANONICAL" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "PROTOCOL=$PROTOCOL" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "CIPHER=\"$CIPHER\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "CLIENT=\"$CLIENT\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "HASH_ALGO=\"$HASH_ALGO\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "GATEWAY=\"$GATEWAY\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "SUBNET=\"$SUBNET\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "LAN_SUBNET=\"$LAN_SUBNET\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "COMP_LZO=\"$COMP_LZO\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg  
  echo "IPP=\"$IPP\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "DHCP_1=\"$DHCP_1\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "TELNET_CONSOLE=\"$TELNET_CONSOLE\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  echo "VERB=\"$VERB\"" >> /boot/config/plugins/openvpnserver/openvpnserver.cfg
  
  logger -trc.openvpnserver -plocal7.info -is "Plugin configuration written"
}

openvpnserver_start()
{
rm -f /var/local/emhttp/plugins/openvpnserver/add_client.log
	
if [ ! -f /var/run/openvpnserver/openvpnserver.pid ]; then
    	echo "Starting Openvpn server....."
	source /boot/config/plugins/openvpnserver/openvpnserver.cfg
	echo "sudo -H -u root openvpn --writepid /var/run/openvpnserver/openvpnserver.pid --config $SERVER_PATH/openvpnserver.ovpn --script-security 2 --daemon 2>&1 &" > /var/local/emhttp/plugins/openvpnserver/openvpnserver.sh
	chmod 777 /var/local/emhttp/plugins/openvpnserver/openvpnserver.sh
	sleep 0.5
	nohup /var/local/emhttp/plugins/openvpnserver/openvpnserver.sh > /var/local/emhttp/plugins/openvpnserver/openvpnserver.out /dev/null & 
	sleep 1
	
	if [ -f /var/run/openvpnserver/openvpnserver.pid ]; then
		echo "OK... Started"
		echo "Adding iptables rule ....."
		openvpnserver_iptables_add; 
 	else
 		echo "An error occurred, server not started!. More info in /var/log/openvpnserver.log or /var/local/emhttp/plugins/openvpnserver/openvpnserver.out"
 	fi
 
 else
        echo "Server already started"
 fi
}

openvpnserver_stop()
{
if [ -e /var/run/openvpnserver/openvpnserver.pid ]; then
   echo "Stoping Openvpnserver....."
   kill $(cat /var/run/openvpnserver/openvpnserver.pid)
   sleep 2
   rm -f /var/run/openvpnserver/openvpnserver.pid
   rm -rf /var/local/emhttp/plugins/openvpnserver/openvpnserver.out
   rm -rf /var/log/openvpnserver.log
   rm -rf /var/log/openvpnserver-status.log
   echo "... Stopped"
   echo "Deleting iptables rule ...."
   openvpnserver_iptables_delete;
else
  echo "Server already stoped"
fi
}

openvpnserver_restart()
{
 openvpnserver_stop;
 openvpnserver_start;
}


write_openvpn_conf()
{
#Writing server configuration file : openvpnserver.ovpn	
source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

if [ -e $SERVER_PATH ]; then
	chmod 755 $SERVER_PATH
else
	mkdir -p $SERVER_PATH
	chmod 755 $KEY_DIR	
fi


echo "server $NETWORK $NETMASK" > $SERVER_PATH/openvpnserver.ovpn

LOCAL_SERVER_IP=$(/etc/rc.d/rc.openvpnserver serverip)
echo "local $LOCAL_SERVER_IP" >> $SERVER_PATH/openvpnserver.ovpn

echo "dev tun" >> $SERVER_PATH/openvpnserver.ovpn
echo "port $SERVER_PORT" >> $SERVER_PATH/openvpnserver.ovpn
echo "proto $PROTOCOL" >> $SERVER_PATH/openvpnserver.ovpn
echo "dh $SERVER_PATH/dh2048.pem" >> $SERVER_PATH/openvpnserver.ovpn

if [[ -f "$KEY_PATH/keys/crl.pem" ]]; then
	echo "crl-verify $KEY_PATH/keys/crl.pem" >> $SERVER_PATH/openvpnserver.ovpn
	echo "command 'crl-verify' was added!"
else
	echo "file crl.pem NOT FOUND"
fi

echo "ca $SERVER_PATH/ca.crt" >> $SERVER_PATH/openvpnserver.ovpn
echo "cert $SERVER_PATH/server.crt" >> $SERVER_PATH/openvpnserver.ovpn
echo "key $SERVER_PATH/server.key" >> $SERVER_PATH/openvpnserver.ovpn


if [ "$IPP" == "ipp.txt" ]; then  
	echo "ifconfig-pool-persist "$SERVER_PATH/$IPP >> $SERVER_PATH/openvpnserver.ovpn
fi

if [ "$DHCP_1" == "dhcp-option DNS 8.8.8.8" ]; then
	echo "push "\"$DHCP_1"\"" >> $SERVER_PATH/openvpnserver.ovpn
	
else
	LOCAL_GW=$(/etc/rc.d/rc.openvpnserver get_gw) 
	echo "push "\"dhcp-option DNS $LOCAL_GW"\"" >> $SERVER_PATH/openvpnserver.ovpn
fi
	
if [ "$GATEWAY" != "Disable" ]; then
	echo "push "\"$GATEWAY"\"" >> $SERVER_PATH/openvpnserver.ovpn
fi
	
echo "tls-server" >> $SERVER_PATH/openvpnserver.ovpn
echo "$VERB" >> $SERVER_PATH/openvpnserver.ovpn
echo "tls-auth $SERVER_PATH/ta.key 0" >> $SERVER_PATH/openvpnserver.ovpn
echo "persist-key" >> $SERVER_PATH/openvpnserver.ovpn
echo "persist-tun" >> $SERVER_PATH/openvpnserver.ovpn
echo "keepalive 10 120" >> $SERVER_PATH/openvpnserver.ovpn

echo "user nobody" >> $SERVER_PATH/openvpnserver.ovpn
echo "group users" >> $SERVER_PATH/openvpnserver.ovpn

if [ "$CIPHER" != "" ]; then    
	echo "$CIPHER" >> $SERVER_PATH/openvpnserver.ovpn
fi

if [ "$CLIENT" != "" ]; then    
	echo "client-to-client" >> $SERVER_PATH/openvpnserver.ovpn
fi

if [ "$HASH_ALGO" != "" ]; then

	echo "$HASH_ALGO" >> $SERVER_PATH/openvpnserver.ovpn
fi

if [ "$COMP_LZO" != "0" ]; then

	echo "$COMP_LZO" >> $SERVER_PATH/openvpnserver.ovpn
fi

if [ "$SUBNET" = "topology subnet" ]; then    
	echo "$SUBNET" >> $SERVER_PATH/openvpnserver.ovpn
fi

if [ "$LAN_SUBNET" = "Enable" ]; then    
	LANSUBNET=$(/etc/rc.d/rc.openvpnserver get_subnet)
	echo "push "\"route $LANSUBNET 255.255.255.0"\"" >> $SERVER_PATH/openvpnserver.ovpn
	IP_ADDR="`echo $NETWORK | rev | sed s'/0/1/' | rev`"
fi

echo "push "\"resolv-retry infinite"\"" >> $SERVER_PATH/openvpnserver.ovpn
echo "status /var/log/openvpnserver-status.log 5" >> $SERVER_PATH/openvpnserver.ovpn
echo "log-append /var/log/openvpnserver.log" >> $SERVER_PATH/openvpnserver.ovpn
echo "status-version 2" >> $SERVER_PATH/openvpnserver.ovpn

if [ "$TELNET_CONSOLE" = "yes" ]; then
	SERVERIP=$(/etc/rc.d/rc.openvpnserver serverip)
	echo "management $SERVERIP 10000" >> $SERVER_PATH/openvpnserver.ovpn
fi

}

check_pem()
{ 
source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

if [[ -f "$KEY_PATH/keys/crl.pem" ]] ; then
	if grep "crl-verify" $SERVER_PATH/openvpnserver.ovpn >/dev/null; then
		echo "OK"
	else
		echo "UPDATE"
	fi	
fi
}

openvpnserver_get_def_gw()
{	
   #localgateway="`ip route show default | grep default | awk {'print $3'}`"
   GW=$(/sbin/ip route | awk '/default/ { print $3 }')
   echo $GW 
}

openvpnserver_get_subnet()
{  
   GW_SUB=$(/sbin/ip route | awk '/default/ { print $3 }')
   SUBNET_IP="${GW_SUB%.*}.0"
   echo $SUBNET_IP
}

openvpnserver_get_vpnserver()
{	
   VPN_SERVER=$( ifconfig tun0 | grep inet | awk '{print $2}')
   echo $VPN_SERVER 
}


openvpnserver_get_easy()
{
source /boot/config/plugins/openvpnserver/openvpnserver.cfg

if [ -e $SERVER_PATH ]; then	
	echo $SERVER_PATH
	chmod 755 $SERVER_PATH
else
	echo $SERVER_PATH
	mkdir -p $SERVER_PATH
	chmod 755 $KEY_DIR	
fi

cd $SERVER_PATH
wget -O 2.x.zip --no-check-certificate https://github.com/OpenVPN/easy-rsa/archive/release/2.x.zip
unzip -o 2.x.zip
mv easy-rsa-release-2.x easy-rsa-master

#update the vars file with our own settings
openvpnserver_update_var 
}

openvpnserver_revoke_client()
{
source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg
echo "Revoking client: " $1
	
cd $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/

source ./vars
sleep 1
cd $KEY_DIR
$SERVER_PATH/easy-rsa-master/easy-rsa/2.0/revoke-full $1
}

openvpnserver_add_client()
{
#Clients config

echo "Adding client: " $1

source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

cd $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/

PORT=$SERVER_PORT
CONF_DIR="$KEY_PATH"
KEY_DIR="$KEY_PATH/keys"
CLI_DIR="$KEY_PATH/clients"
LOG_DIR="/var/log/openvpnserver_cert"

## check if this client package already exists
if grep CN=$1 $KEY_DIR/index.txt; then
   echo "$1 alredy exist. try a different name!" >> /var/local/emhttp/plugins/openvpnserver/openvpnserver.out
   echo "$1 alredy exist. try a different name!"
   exit 1
fi


#REMOTE_ADDR=$(/etc/rc.d/rc.openvpnserver serverip)
INTERNET_IP=$(/var/local/emhttp/plugins/openvpnserver/check-my-ip.sh)

if [[ $CANONICAL != "" ]]; then
	INTERNET_IP=$CANONICAL
fi	

cd $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/
source ./vars
cd $KEY_DIR
client=$1

#KEY_CN=$client KEY_EMAIL=$KEY_CN@acme $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/pkitool $KEY_CN
KEY_CN=$client $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/pkitool $client
	
# New client file creating

cat > $KEY_DIR/$client.ovpn <<END
remote $INTERNET_IP
$CIPHER
$HASH_ALGO
client
dev tun
proto $PROTOCOL
port $PORT
resolv-retry infinite
tls-client
nobind
persist-key
persist-tun
ca ca.crt
cert $client.crt
key $client.key
tls-auth ta.key 1
remote-cert-tls server
$COMP_LZO
$VERB
route-delay 2
END
#*****END ****

if [[ $2 == "" ]]; then
	zip $CLI_DIR/$client.zip $client.ovpn $client.crt $client.key ca.crt ta.key		
fi

chmod -R 755 $KEY_PATH

if [[ $2 != "" ]]; then  # this is for pkcs12 file (IOS ..)
	echo "#!/usr/bin/expect -f" > $KEY_DIR/pkcs12.sh
	echo "#! /bin/bash" >> $KEY_DIR/pkcs12.sh
	#echo "#exp_internal 1" >> $KEY_DIR/pkcs12.sh
	echo "spawn openssl pkcs12 -export -in $client.crt -inkey $client.key -certfile ca.crt -name $client -out $client.p12" >> $KEY_DIR/pkcs12.sh
	echo "expect \"Enter Export Password:\"" >> $KEY_DIR/pkcs12.sh
	echo "send \"$2\r\"" >> $KEY_DIR/pkcs12.sh
	echo "sleep 1" >> $KEY_DIR/pkcs12.sh
	echo "expect \"Verifying - Enter Export Password:\"" >> $KEY_DIR/pkcs12.sh
	echo "send \"$2\r\"" >> $KEY_DIR/pkcs12.sh
	echo "sleep 1" >> $KEY_DIR/pkcs12.sh
	echo "expect eof" >> $KEY_DIR/pkcs12.sh
				
	sleep 0.5

	chmod a+x pkcs12.sh
	sleep 0.5		
	#execute above script
	nohup $KEY_DIR/pkcs12.sh >> /var/local/emhttp/plugins/openvpnserver/openvpnserver.out /dev/null
		
	sleep 7		

		#modify the client ovpn file to work with IOS
				
		echo "Update $client.ovpn to be used with IOS"
				
		sed -i '/ntls-auth ta.key 1/d' $client.ovpn		
		sed -i '/ca ca.crt/d' $client.ovpn
		sed -i '/key/d' $client.ovpn
		sed -i '/cert/d' $client.ovpn

		echo "<ca>" >> $client.ovpn
		cat ca.crt >> $client.ovpn
		echo "</ca>" >> $client.ovpn
		
		echo "key-direction 1" >> $client.ovpn
		echo "<tls-auth>" >> $client.ovpn
		cat ta.key >> $client.ovpn
		echo "</tls-auth>" >> $client.ovpn
				
		sleep 1
		cd $KEY_DIR/
				
		#make a readme file with password and instructions to below zip file
		echo "Password for the cert: $2" > README.txt
		echo "" >> README.txt
		echo "Next step is to bring this file to our mobile device. Send an e-mail to yourself with the .p12 file attached." >> README.txt
		echo "Since the file is password protected, it is safe to e-mail." >> README.txt
		echo "" >> README.txt
		echo "When you open the e-mail on your mobile device, and click the .p12 attachment you will be asked to install the certificate. Click install and confirm installation." >> README.txt
		echo "If your device has a passcode, you will be asked to enter it. Afterwards, you need to type the password you choose when generating the p12 file." >> README.txt
		echo "iOS mentions the certificate is Not Trusted. Dont worry, its fine." >> README.txt
		echo "" >> README.txt	
		echo "Your certificate is now installed on iOS and it is ready to be used by the OpenVPN app." >> README.txt
		echo "" >> README.txt
	        echo "e-mail the ovpn file to yourself as well. The e-mail app on iOS will allow you to import this configuration to the OpenVPN app by clicking on the file." >> README.txt 
		echo "The OpenVPN app will show your imported configuration. Confirm by tapping the  green + icon." >> README.txt
		echo "Next step, select the certificate to use with this profile. Here you will select the certificate we imported into iOS in the previous step." >> README.txt
		
		sleep 1
		chmod 400 {$client.p12,$client.ovpn,README.txt}
		echo "Creating a zip file for the client"	
		zip $CLI_DIR/$client.zip $client.p12 $client.ovpn README.txt				
fi
}	
	
openvpnserver_create_server_cert()
{
source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

cd $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/

#OpenVPN common vars

PORT=$SERVER_PORT
KEY_SIZE=2048
CA_EXPIRE=3650
KEY_EXPIRE=3650
KEY_COUNTRY=$KEY_COUNTRY
KEY_PROVINCE=$KEY_PROVINCE
KEY_CITY=$KEY_CITY
KEY_ORG=$KEY_ORG
KEY_EMAIL=$KEY_EMAIL
#Clients config
CONF_DIR="$KEY_PATH"
KEY_DIR="$KEY_PATH/keys"
CLI_DIR="$KEY_PATH/clients"
LOG_DIR="/var/log/openvpnserver_cert"

if [ -e $KEY_PATH ]; then
	rm -rf $KEY_PATH
	mkdir -p $KEY_PATH
	chmod 755 $KEY_PATH
else
	mkdir -p $KEY_PATH
	chmod 755 $KEY_PATH
fi

if [ -e $KEY_DIR ]; then
	rm -rf $KEY_DIR
	mkdir -p $KEY_DIR
	chmod 755 $KEY_DIR
else
	mkdir -p $KEY_DIR
	chmod 755 $KEY_DIR	
fi

if [ -e $CLI_DIR ]; then
	rm -rf $CLI_DIR
	mkdir -p $CLI_DIR
	chmod 755 $CLI_DIR
else
	mkdir -p $CLI_DIR
	chmod 755 $CLI_DIR
fi

sleep 2

##1.0.1 version of OpenSSL libraries, you will need to duplicate the easyrsa configuration 
##with a new name. Simply copy and run it in your terminal:
##cp openssl-1.0.0.cnf openssl-$(openssl version | awk '{print $2}').cnf

source ./vars
./clean-all
./build-dh
./pkitool --initca 
./pkitool --server server

sleep 1

cd $KEY_DIR
/usr/sbin/openvpn --genkey --secret ta.key
sleep 0.5
#sudo chmod 600 ta.key
chmod 400 {server.key,server.crt,ca.crt,ta.key}

#This command will generate an OpenVPN static key and write it to the file ta.key.
#This key should be copied over a pre-existing secure channel to the server and all client machines
sleep 1

cp $KEY_DIR/ca.crt $SERVER_PATH
cp $KEY_DIR/dh2048.pem $SERVER_PATH
cp $KEY_DIR/server.crt $SERVER_PATH
cp $KEY_DIR/server.key $SERVER_PATH
cp $KEY_DIR/ta.key $SERVER_PATH

chmod -R 755 $KEY_PATH ## This migh tbe change to something else!!

# ********  END server cert creatings **********************
}

openvpnserver_update_var()
{
source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

#OpenVPN common vars

PORT=$SERVER_PORT
KEY_SIZE=2048
CA_EXPIRE=3650
KEY_EXPIRE=3650
KEY_COUNTRY=$KEY_COUNTRY
KEY_PROVINCE=$KEY_PROVINCE
KEY_CITY=$KEY_CITY
KEY_ORG=$KEY_ORG
KEY_EMAIL=$KEY_EMAIL
KEY_DIR="$KEY_PATH/keys"

cd $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/

# romove original settings in vars
sed -i '/export KEY_COUNTRY="US"/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_PROVINCE="CA"/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_CITY="SanFrancisco"/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_ORG="Fort-Funston"/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_EMAIL="me@myhost.mydomain"/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_EMAIL="mail@host.domain"/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/changeme/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export PKCS11_PIN=1234/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_DIR/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_OU/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars
sed -i '/export KEY_SIZE/d' $SERVER_PATH/easy-rsa-master/easy-rsa/2.0/vars

sleep 1

# add new settings
echo "export KEY_SIZE="2048""  >> vars
echo "export KEY_DIR=\"$KEY_DIR\" " >> vars
echo "export CA_EXPIRE=$CA_EXPIRE " >> vars
echo "export KEY_EXPIRE=$KEY_EXPIRE " >> vars
echo "export KEY_COUNTRY=\"$KEY_COUNTRY\" " >> vars
echo "export KEY_PROVINCE=\"$KEY_PROVINCE\" " >> vars
echo "export KEY_CITY=\"$KEY_CITY\" " >> vars
echo "export KEY_ORG=\"$KEY_ORG\" " >> vars
echo "export KEY_EMAIL=\"$KEY_EMAIL\" " >> vars
echo "export KEY_NAME=\"EasyRSA\" " >> vars
echo "export KEY_OU=\"VPN-CLIENT\" " >> vars
echo "The vars file was updated successful!!"

}


server_IP()
{
	IP=$(ip route get 8.8.8.8 | awk '/8.8.8.8/ {print $NF}')
	echo $IP
}
 
 
openvpnserver_getonlineversion()
{
OPEN_VPN_HOSTING_SERVER="http://openvpn.net/index.php/open-source/downloads.html"
OPEN_VPN_ONLINE_VER=$(wget ${OPEN_VPN_HOSTING_SERVER} -q --no-check-certificate -O - |grep "Change Log" | awk 'gsub(/.*OpenVPN | -- released on.*/,"")')
echo "${OPEN_VPN_ONLINE_VER:0:6}"
}

openvpnserver_getlocalversion()
{
if [ -e /usr/sbin/openvpn ];
   then
     OPEN_VPN_INSTALLED=$(openvpn --version | grep "OpenVPN " | awk 'gsub(/.*i4 | x.*/,"")')
     #echo $OPEN_VPN_INSTALLED
     echo "${OPEN_VPN_INSTALLED: -6}"
 fi
}

openvpnserver_view_online_user() {
VIEW_ONLINE_USER="` grep -P "CLIENT_LIST," /var/log/openvpnserver-status.log | sed -r 's/^[^,]+,+((,*[^,]+){1}).*/\1/' |  grep -Eiv "CLIENT_LIST" | sed 's/$/\ ; /'`"
if [ "$VIEW_ONLINE_USER" == "" ]
   then
      echo "NO CLIENTS CONECTED"
   else
      echo "$VIEW_ONLINE_USER"
fi
}

openvpnserver_list_valid_user(){
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

if [ -f $KEY_PATH/keys/index.txt ]; then
   VIEW_VALID_USER="`grep -P "V\t" $KEY_PATH/keys/index.txt | sed 's/.*CN=\(.*\)\/name.*/\1/g'  | grep -Eiv "server" | sed 's/$/\ ; /'`"
    if [ "$VIEW_VALID_USER" == "" ]
      then
        echo "NO CLIENTS CREATED YET"
    else
       echo "$VIEW_VALID_USER" 
    fi
fi 
}

openvpnserver_view_revoked_user() {
source /boot/config/plugins/openvpnserver/openvpnserver_cert.cfg

if [ -f $KEY_PATH/keys/index.txt ]; then
   VIEW_REVOKED_USER="`grep -P "R\t" $KEY_PATH/keys/index.txt | sed 's/.*CN=\(.*\)\/name.*/\1/g' | sed 's/$/\ ; /'`"
     if [ "$VIEW_REVOKED_USER" == "" ]
       then
         echo "NO CLIENTS REVOKED"
       else
        echo "$VIEW_REVOKED_USER"
     fi
fi
}

openvpnserver_iptables_add() {
source /boot/config/plugins/openvpnserver/openvpnserver.cfg
source  /boot/config/network.cfg

NEWBRIDGING=`echo -n $BRIDGING|  tr -d '\r'`
NEWBRNAME=`echo -n $BRNAME|  tr -d '\r'`

if [ "$NEWBRIDGING" == "yes" ] ; then
	IPRULES1="iptables -t nat -A POSTROUTING -s $NETWORK/24 -o $NEWBRNAME -j MASQUERADE"
	eval $IPRULES1
else
	IPRULES1="iptables -t nat -A POSTROUTING -s $NETWORK/24 -o eth0 -j MASQUERADE"
	eval $IPRULES1
fi

iptables -t nat -L POSTROUTING -n -v --line-numbers | grep $NETWORK
}

openvpnserver_iptables_delete() {

for line_num in $(iptables -vn -t nat --line-numbers --list POSTROUTING |grep $NETWORK|awk '{print $1}')

do
  LINES="$line_num $LINES"
done

# Delete the lines, last to first.
for line in $LINES
do
  iptables -t nat -D POSTROUTING $line
done

unset LINES
iptables -t nat -L POSTROUTING -n -v --line-numbers | grep $NETWORK
}

# read our configuration
source /boot/config/plugins/openvpnserver/openvpnserver.cfg

case "$1" in
  'updatecfg')
    openvpnserver_updatecfg
    ;;
  'updatecfg_cert')
    openvpnserver_cert_updatecfg
    ;;
  'start')
    openvpnserver_start
    ;;
  'stop')
    openvpnserver_stop
    ;;
  'restart')
    openvpnserver_restart
    ;;
  'writeconf')
    write_openvpn_conf
    ;;
  'download_easy-rsa')
    openvpnserver_get_easy
    ;;
  'create_server_cert')
    openvpnserver_create_server_cert
    ;;
  'serverip')
    server_IP
    ;;
  'getonlineversion')
   openvpnserver_getonlineversion
   ;;
  'getlocalversion')
   openvpnserver_getlocalversion
   ;;  
  'get_gw')
   openvpnserver_get_def_gw
   ;;
   'get_subnet')
   openvpnserver_get_subnet
   ;;
  'get_vpnserver')
   openvpnserver_get_vpnserver
   ;;
   'add_client')
   openvpnserver_add_client $2 $3 $4
   ;;
   'revoke_client')
   openvpnserver_revoke_client $2 $3
   ;;
    'check_pem')
   check_pem
   ;;
    'view_valid_user')
   openvpnserver_list_valid_user
   ;;
    'view_online_user')
   openvpnserver_view_online_user
   ;;
    'view_revoked_user')
   openvpnserver_view_revoked_user
   ;;
    'iptables')
   openvpnserver_iptables_add
   ;;
     'iptablesd')
   openvpnserver_iptables_delete
   ;;
  *)
    
    echo "usage $0 start|stop|restart|download_easy-rsa|create_server_cert|add_client 'name'|add_client 'name' 'password|revoke_client 'name'|view_valid_user|view_online_user|view_revoked_user"
esac

